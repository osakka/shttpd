#!/bin/bash
# My Little WebServer.
# Omar Al-Sakka (mid-nov2001) All-Rights Reserved.
# This code is still pre ALPHA!
# !/bin/bash -x For trace during runtime.
#
# Please refer to the man page in section (8) for more details.
# In no place in this script has stdout/stderr been redirected to a
# null device.  This is to ensure a clean runtime throughout.
#
# Copyright © 2001 Omar Al-Sakka.  This is free software.  There is  NO
# warranty;  not  even  for  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Copying of this code is prohibited.  Authorisation from the author IS
# required before the use of any code-snippets... 

### System Commands.
declare -r writeln="echo";
declare -r write="echo -en";
declare -r sys_cat="/bin/cat";
declare -r sys_file_id="/usr/bin/file -ib";
declare -r delete_file="/bin/rm";
declare -r stat_uri="/usr/bin/stat -t";
declare -r sys_date=`/bin/date -uR`;
### Directories.
declare -r shttpd_dir="/pkg/shttpd";
declare -r root_dir="$shttpd_dir/www_root";
declare -r tmp_dir="$shttpd_dir/tmp";
declare -r log_dir="$shttpd_dir/log"
### Other Declares.
declare -r server_id="shttpd 0.3a";
declare -r std_index="index.html";
declare -r deny_file="deny_list";
declare -r webmaster="postmaster";
declare -r session="$$$RANDOM";
declare -r timeout="120";
### Log Files.
declare -r access_log="$log_dir/access.log";
declare -r error_log="$log_dir/error.log";
declare -r debug_log="$log_dir/debug.log";

exec 2>> $debug_log ### Server Internal Error Log.
umask u+rw;         ### Set default file creation att.
set -P;             ### -P (no sym for cd++)
set -m;             ### monitor.
set +B;             ### No brace Expand.
set +h;             ### No Hash All.

function server_ident() {
  local -a content_stat=(` $stat_uri $3 `);
  $writeln "HTTP/1.1 $1 ";
  $writeln "Server: $server_id ";
  $writeln "Date: $sys_date ";
  $writeln "Accept-Ranges: none ";
  $writeln "Location: $uri ";
  $writeln "Content-Length: ${content_stat[1]}";
  [ "$2" ] && $write "Content-type: $2 \n\n"; 
}

function std_template() {
  function html() {
    $write "\n<!--|### This Mangeled HTML Line was Generated by $server_id on $HOSTNAME ###|-->";
    $write "<html><title>$2</title><body><table border=\"0\" width=\"100%\" align=\"center\">";
    $write "<tr><td><strong><big>$2</big></strong> $3</td></tr></table>";
    $write "<table border=\"0\" width=\"100%\" align=\"left\" bgcolor=\"#FFFFFF\">";
    $write "<tr><td><i>$server_id webserver on $HOSTNAME</i><br>";
    $write "<a href=\"$webmaster@$HOSTNAME\">$webmaster</a>@$HOSTNAME";
    $write "</td></tr></table></body></html>\n"; 
  }
  html "$1" "$2" "$3" > $tmp_dir/$session 2>&1
  server_ident "$1" "text/html" "$tmp_dir/$session";
  $sys_cat $tmp_dir/$session;
  $delete_file $tmp_dir/$session;
}

function get_directory() {
  [ -d "./$uri" ] && cd ./$uri;
  $write "<table border=\"0\" width=\"98%\" align=\"center\">";
  $write "<tr><td width=\"1%\" bgcolor=\"#FFFFFF\"></td>";
  $write "<td width=\"35%\" bgcolor=\"#B0C4DE\" align=\"left\"><strong>Name</strong></td>";
  $write "<td bgcolor=\"#B0C4DE\" align=\"left\"><strong>Description </strong>(type)</td></tr>";
  $write "<tr><td></td><td bgcolor=\"#FFDAB9\" align=\"left\"><a href=\"\">.</a></td>";
  $write "<td align=\"left\">Refresh directory</td></tr>";
	[ "$uri" = "/" ] || 
    $write "<tr><td></td><td bgcolor=\"#FFDAB9\" align=\"left\"><a href=\"..\">..</a></td><td align=\"left\">Parent directory</td></tr>";
  local loop=0;
  local switch=1;
  local -a DIR_RAW=(`$writeln * `);
  while [ "${DIR_RAW[$loop]}" ]; do
    if [ "$switch" = "1" ]; then highlight="#FFEFD5"; switch=0;
    else highlight="#FFFFFF"; switch=1; fi
    local id_tag="";
    [ -x "${DIR_RAW[$loop]}" ] && id_tag="*";
    [ -d "${DIR_RAW[$loop]}" ] && id_tag="/" && DIR_RAW[$loop]="${DIR_RAW[$loop]}/";
    if [ -e "${DIR_RAW[$loop]}" ]; then
      $write "<tr><td align=\"center\">$id_tag</td>";
      $write "<td bgcolor=\"$highlight\" align=\"left\">";
      $write "<a href=\"$uri${DIR_RAW[$loop]}\"><strong>${DIR_RAW[$loop]}</strong></a></td>";
      $write "<td bgcolor=\"$highlight\" align=\"left\">`file -b ${DIR_RAW[$loop]}`</td></tr>"; 
    fi
    (( loop++ ));
  done;
  $write "</table>";
}

function        exec_error() { std_template "500 Internal Server Error" "$FUNCNAME" ": Error during retrieval of URI."; }
function         uri_error() { std_template "404 Not Found" "$FUNCNAME" ": No such URI on this server."; }
function      method_error() { std_template "501 Not Implemented" "$FUNCNAME" ": Unknown method requested."; }
function server_root_error() { std_template "503 Service Unavailable" "$FUNCNAME" ": Server root unavailable."; }
function    uri_check_fail() { std_template "400 Bad Request" "$FUNCNAME" ": Illegal character or character sequence encountered."; }
function         deny_list() { std_template "403 Forbidden" "$FUNCNAME" ": Directory Listing Denied.";  }
function         uri_found() { server_ident "302 Found"; }
function        list_files() { std_template "200 OK" "" "<strong>Browsing Directory '$uri'</strong><br><br>`get_directory`"; }
function      display_file() { server_ident "200 OK" "`$sys_file_id $root_dir$uri`" "$root_dir$uri"; 
                               $sys_cat $root_dir$uri || exec_error; }
function         exec_file() { cd $root_dir/$base_dir || uri_error;
                               ./$command $parameters > $tmp_dir/$session || exec_error;
                               server_ident "200 OK" "" ""
                               # server_ident "200 OK" "" "$tmp_dir/$session";
                               $sys_cat $tmp_dir/$session || exec_error;
                               $delete_file $tmp_dir/$session; break; }

function dump_uri() {
  $write "\t<- $$ - dumping requested uri.\n" >> $access_log;
  if [ -d "$root_dir" ]; then
    if [ -r "$root_dir" ]; then
      if [ -r "$root_dir$uri" ]; then
        if [ -d "$root_dir$uri" ]; then 
          local slash_check=${uri##/*/};
          [ "$uri" != "/" ] && [ "$slash_check" ] && uri="$uri/";
          if [ -r "$root_dir$uri$std_index" ]; then 
            uri="$uri$std_index"; display_file;
          else if [ -e "$root_dir$uri$deny_file" ]; then 
            deny_list; else list_files; fi fi
        else 
          if [ -x "$root_dir$uri" ]; then exec_file;
          else display_file; fi
        fi
      else uri_error;
      fi
    else server_root_error;
    fi
  fi
}

# Perl Like Chop Function.
function chop() {
  local input_length=${#1};
  [ "$input_length" = "0" ] && return 0;
  $write "\n\nBefore: " >> $access_log;
  $write "$1" | od -c >> $access_log;
  local loop=0;
  local user_input="${1}";
  while [ "$loop" -lt "$input_length" ]; do
    $write "\n\nChecking Char : $loop : for -> $current_state" >> $access_log;
    (( loop++ ));
  done
  $write "\n\nAfter : " >> $access_log;
  $write "$current_state" | od -c >> $access_log;
  return 0;
}

function taint_check() {
  [ "$@" ] || return 1;
  local tmp_loop=0;
  local temp_var="${@}";
  while [ "${illegal_chars[$tmp_loop]}" ]; do
    taint="${temp_var//${illegal_chars[$tmp_loop]}/ }";
    if ! [ "$temp_var" = "$taint" ]; then uri_check_fail; return 1; fi
    (( tmp_loop++ ));
  done
  return 0;
}

function parse_uri() {
  taint_check "$uri"  || return 1;
  extended_input=0;
  base_dir="${uri%/*}";
  command_line="${uri##/*/}";
  command="${command_line%\?*}";
  parameters="${command_line/*$command\?/}";
  parameters="${parameters//&/ }";
  [ "$parameters" = "$command_line" ] && parameters="";
  if [ "$base_dir" ]; then
    uri="$base_dir/$command";
  else uri="$command";
  fi
  valid_uri=1;
  requested_uri="$uri";
  return 0;
}

function readln() {
  method="";
  uri="";
  version="";
  read -n 240 -t $timeout -r method uri version;
  [ "${#method}" -lt "2" ] && return 1;
  taint_check "$method" || return 1;
  case "$method" in
    get|GET) parse_uri; ;;
    put|PUT) parse_uri; ;;
    post|POST) parse_uri; ;;
    *) extended_input=1; ;;
  esac
  return 0;
}

# Main.
  export REMOTE_ADDR="$REMOTE_HOST";
  export REMOTE_USER="omar";
  cd $root_dir;
  trap "" 2 3 4 6 8 9 13 15 20;
  declare -a illegal_chars="( \"%?0\" \"./\" \"/.\" \"//\" \"~\" \"$\" \"..\" \"}\" \"{\" \";\" \"|\" )";
  inline_request_counter=0;
  inline=0;
  while true; do
    valid_uri=0;
    while readln; do
      if [ "$extended_input" = "1" ]; then
        $write "\t-> $$ - $method\n" >> $access_log;
      else
        $write "$$\t-> [$inline_request_counter] $method $uri $version\n" >> $access_log;
        (( inline_request_counter++ ));
      fi
    done;
    if [ "${#method}" -lt "2" ]; then
      if [ "$valid_uri" = "1" ]; then uri="$requested_uri"; dump_uri; 
      inline="0"
      else
        if [ "$inline" = "1" ]; then exit 0; 
        else exit 1; fi
      fi
    fi
  done;
